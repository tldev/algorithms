See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
PMD:          FAILED (1 warning)
Checkstyle:   FAILED (0 errors, 16 warnings)

Correctness:  27/27 tests passed
Memory:       8/8 tests passed
Timing:       42/42 tests passed

Aggregate score: 100.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.7K Jul 19 01:27 KdTree.java
1.9K Jul 19 01:27 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'level' is never read. Consider removing it from the class.  At KdTree.java:[line 166]
Warnings generated: 1

================================================================


% pmd *.java
*-----------------------------------------------------------
PointSET.java:7: The private instance (or static) variable 'set' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:1: Do not use .* in import statements. [AvoidStarImport]
[WARN] KdTree.java:107:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:111:21: The method '_nearest' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] KdTree.java:150:65: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:161:17: The instance (or static) variable 'point' must be private. [VisibilityModifier]
[WARN] KdTree.java:162:13: The instance (or static) variable 'level' must be private. [VisibilityModifier]
[WARN] KdTree.java:163:14: The instance (or static) variable 'left' must be private. [VisibilityModifier]
[WARN] KdTree.java:163:20: The instance (or static) variable 'right' must be private. [VisibilityModifier]
[WARN] KdTree.java:184:21: The method '_contains' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] PointSET.java:1: Do not use .* in import statements. [AvoidStarImport]
[WARN] PointSET.java:37:12: 'for' is not followed by whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 11 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:36:27: The numeric literal '0.5' appears to be unnecessary. [NumericLiteral]
[WARN] PointSET.java:36:32: The numeric literal '0.5' appears to be unnecessary. [NumericLiteral]
[WARN] PointSET.java:36:37: The numeric literal '0.5' appears to be unnecessary. [NumericLiteral]
[WARN] PointSET.java:36:42: The numeric literal '0.5' appears to be unnecessary. [NumericLiteral]
[WARN] PointSET.java:67:46: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [IllegalMethodCall]
Checkstyle ends with 0 errors and 5 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: Test size() by inserting n random points
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: Test isEmpty() by checking for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: Insert n random points and check contains() for random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: Insert n random points and check nearest() for random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: Insert n random points and check range() for random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: Test whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an GRID-by-GRID grid means that it is of the form (i/GRID, j/GRID),
where i and j are integers between 0 and GRID

Running 19 total tests.

Test 1a: Insert n non-degenerate points and check size() after each insertion
  * 50000 random non-degenerate points in a 65536-by-65536 grid
  * 5000 random non-degenerate points in a 8192-by-8192 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 1b: Insert n distinct points and check size() after each insertion
  * 100000 random distinct points in a 65536-by-65536 grid
  * 100000 random distinct points in a 8192-by-8192 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1 random distinct points in a 1-by-1 grid
==> passed

Test 1c: Insert n general points and check size() after each insertion
  * 100000 random general points in a 65536-by-65536 grid
  * 100000 random general points in a 8192-by-8192 grid
  * 100000 random general points in a 1024-by-1024 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 16-by-16 grid
  * 10 random general points in a 1-by-1 grid
==> passed

Test 2: Test size() and isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3a: Insert n non-degenerate points and call contains() with random query points
  * 50000 random non-degenerate points in a 65536-by-65536 grid
  * 5000 random non-degenerate points in a 8192-by-8192 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 5 random non-degenerate points in a 16-by-16 grid
  * 1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 3b: Insert n distinct points and call contains() with random query points
  * 100000 random distinct points in a 65536-by-65536 grid
  * 100000 random distinct points in a 8192-by-8192 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1 random distinct points in a 1-by-1 grid
==> passed

Test 3c: Insert n general points and call contains() with random query points
  * 10000 random general points in a 1024-by-1024 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 1-by-1 grid
==> passed

Test 4: Test whether two KdTree objects can be created at the same time
==> passed

Test 5a: Insert n non-degenerate points and call range() for n random query rectangles
  * 5000 random non-degenerate points and rectangles in a 65536-by-65536 grid
  * 5000 random non-degenerate points and rectangles in a 8192-by-8192 grid
  * 500 random non-degenerate points and rectangles in a 1024-by-1024 grid
  * 50 random non-degenerate points and rectangles in a 128-by-128 grid
  * 5 random non-degenerate points and rectangles in a 16-by-16 grid
==> passed

Test 5b: Insert n distinct points and call range() for n random query rectangles
  * 5000 random distinct points and rectangles in a 65536-by-65536 grid
  * 5000 random distinct points and rectangles in a 8192-by-8192 grid
  * 1000 random distinct points and rectangles in a 1024-by-1024 grid
  * 1000 random distinct points and rectangles in a 128-by-128 grid
  * 5 random distinct points and rectangles in a 16-by-16 grid
==> passed

Test 5c: Insert n general points and call range() for n random query rectangles
  * 5000 random general points and rectangles in a 8192-by-8192 grid
  * 5000 random general points and rectangles in a 1024-by-1024 grid
  * 5000 random general points and rectangles in a 128-by-128 grid
  * 5000 random general points and rectangles in a 16-by-16 grid
  * 5000 random general points and rectangles in a 1-by-1 grid
==> passed

Test 5d: Insert n points and call range() for tiny rectangles enclosing each point.
  * 4000 tiny rectangles and 4000 points in a 65536-by-65536 grid
  * 4000 tiny rectangles and 4000 points in a 8192-by-8192 grid
  * 4000 tiny rectangles and 4000 points in a 1024-by-1024 grid
  * 4000 tiny rectangles and 4000 points in a 128-by-128 grid
  * 4000 tiny rectangles and 4000 points in a 16-by-16 grid
==> passed

Test 6a: Insert n non-degenerate points and call nearest() with random query points
  * 50000 random non-degenerate points in a 65536-by-65536 grid
  * 5000 random non-degenerate points in a 8192-by-8192 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 5 random non-degenerate points in a 16-by-16 grid
==> passed

Test 6b: Insert n distinct points and call nearest() with random query points
  * 50000 random distinct points in a 65536-by-65536 grid
  * 10000 random distinct points in a 8192-by-8192 grid
  * 10000 random distinct points in a 1024-by-1024 grid
  * 5000 random distinct points in a 128-by-128 grid
  * 50 random distinct points in a 16-by-16 grid
==> passed

Test 6c: Insert n general points and call nearest() with random query points
  * 10000 random general points in a 1024-by-1024 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 16-by-16 grid
==> passed

Test 7a: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
==> passed

Test 7b: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 7c: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8: Intermixed sequence of calls to insert(), isEmpty(), size(),
        contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
==> passed


Total: 19/19 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          120                160
=> passed        2          208                288
=> passed        5          472                672
=> passed       10          912               1312
=> passed       25         2232               3232
=> passed      100         8832              12832
=> passed      400        35232              51232
=> passed      800        70432             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 88.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1725585
=> passed   320000    1845404
=> passed   640000    1404715
=> passed  1280000    1099737
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     500883
=> passed   320000     482832
=> passed   640000     419964
=> passed  1280000     373229
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3951
=> passed    20000       1888
=> passed    40000        868
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4867
=> passed    20000       2283
=> passed    40000       1009
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1443517               0.0              22.1              21.1               0.0
=> passed   320000    1379434               0.0              22.5              21.5               0.0
=> passed   640000    1059445               0.0              24.0              23.0               0.0
=> passed  1280000     824287               0.0              26.1              25.1               0.0
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     513083              18.5              17.5               0.0
=> passed    20000     550898              19.7              18.7               0.0
=> passed    40000     507116              21.8              20.8               0.0
=> passed    80000     497442              22.0              21.0               0.0
=> passed   160000     470587              23.2              22.2               0.0
=> passed   320000     414880              25.0              24.0               0.0
=> passed   640000     375553              25.7              24.7               0.0
=> passed  1280000     427622              27.2              26.2               0.0
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     326683               0.0              31.1              81.9              42.5
=> passed    20000     342907               0.0              32.6              85.9              48.8
=> passed    40000     310816               0.0              39.3             103.2              52.7
=> passed    80000     292617               0.0              40.7             106.5              55.0
=> passed   160000     266554               0.0              42.5             113.1              63.2
=> passed   320000     223446               0.0              40.2             105.7              55.7
=> passed   640000     202595               0.0              43.3             113.8              62.6
=> passed  1280000     139081               0.0              47.0             123.0              60.1
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   406113                  50.2                    0.0                    50.5              49.8
=> passed    20000   405553                  55.0                    0.0                    55.5              54.5
=> passed    40000   367824                  64.5                    0.0                    64.8              64.1
=> passed    80000   351102                  65.7                    0.0                    67.0              64.5
=> passed   160000   328522                  71.2                    0.0                    71.5              70.8
=> passed   320000   285482                  74.0                    0.0                    75.3              72.8
=> passed   640000   218536                  76.9                    0.0                    78.1              75.7
=> passed  1280000   178041                  85.8                    0.0                    85.4              86.2
==> 8/8 tests passed



Total: 28/28 tests passed!


================================================================
